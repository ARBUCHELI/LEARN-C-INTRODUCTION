# HELLO WORLD: LESSON
---------------------

* The C Programming Language
----------------------------
Congratulations on choosing to learn the C programming language! C has been around for quite some time and it is one of the foundational languages of computer science.

C is an older language compared to other languages in use and yet it is still very popular. The TIOBE Index, which measures the popularity of programming languages, has C at the top of 
the list for many years. This is due to C’s use in all areas of computing.

Most operating systems today including the Linux Kernel are implemented with C code. The main version of the Python programming language is named CPython because it is implemented using 
C. C has also been extended using the languages C++ and C#.

C is also common in embedded systems which are smaller computing units that control things like home appliances, lighting controllers, and other small physical devices.

The C programming language is everywhere. Learning it will help you become a better programmer ready for the next challenge in any field of computer science.

* Instructions
--------------
The workspace shows the C programming language’s reach throughout the computing landscape. Through the code in operating systems, other programming languages, and embedded systems, C is 
everywhere!

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Hello World
-------------
So let’s look at our first C program!

#include <stdio.h>

int main() {
  // output a line
  printf("Hello World!\n");
}

When this code is run the following text is displayed in the terminal.

Hello World!

Let’s go through the code line by line to see what is happening. You don’t need to understand everything right away, this is just a first look.

	. #include <stdio.h>: This line is needed to run the line of code that starts with printf.

 	. int main(){ }: This is the starting point of the code. All the code inside the curly braces {} runs first.

	. // output a line: This is a comment. It is not a line of code but a message we can add to code to tell ourselves or others what the code does. When the code is run this line 
	will be ignored.

	. printf("Hello World!");: This line of code prints, or outputs, the text “Hello World!” to the console. Printing text to the console is one way for a program to communicate with 
	the user.

Try running the code and see the output yourself!

* Instructions
--------------
Checkpoint 1 Passed
1.
The Hello World code located in the workspace in the file script.c.

Run the code to see the text output in the console.


Hint
Run the code in script.c.

script.c
--------
#include <stdio.h>

int main() {
  // output a line
  printf("Hello World!\n");
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Syntax and Errors
-------------------
When writing in C, we need to follow a set of rules in order for the code to run properly. These rules are known as syntax.

As we go through each lesson we will learn new syntax on the topics being covered.

Let’s look at the Hello World code to examine common syntax that will exist in most (if not all) of your programs.

#include <stdio.h>

int main() {
  // output a line
  printf("Hello World!\n");
}

* Case Sensitivity
------------------
Most of the words in the code use all lowercase letters. This is known as case-sensitivity. Whether lowercase or uppercase, certain words in the code must follow the correct case in order 
for the code to run. The only lines of text that can change case are the comment and the text between quotes.

* The Semicolon
---------------
All statements, like the printf() statement, need to end with a semicolon. This identifies the end of the statement and is needed for the code to run correctly.

* Double Quotes
---------------
The text in between the double quotes " is known as a string (think of a string of characters). All strings must be surrounded by double-quotes.

So what happens when we break the rules? The answer is errors. The below text is an error that is output when we leave off the semicolon from the printf() statement in our Hello World code.

script.c: In function ‘main’:
script.c:6:1: error: expected ‘;’ before ‘}’ token
 }
 ^

The text above gives the following information:

	. The component location, In function ‘main’

	. The line and column number, 6:1

	. A description, expected ‘;’ before ‘}’

As we can see the message does its best to help us solve the errors in our code.

* Instructions
--------------
Checkpoint 1 Passed
1.
Uh oh! Someone broke the Hello World code in script.c. Run the code to view the error in the console.


Hint
Run the code to see the error in the console.

Checkpoint 2 Passed
2.
Given the error in the console, can you fix the code in script.c.


Hint
The printf() statement is missing something at the end.

Checkpoint 3 Passed
3.
There’s still an error in the console. Given this new error, can you fix the code?


Hint
Something is wrong with the size of one of the letters in int Main() {.

Checkpoint 4 Passed
4.
The code should run and output the text as expected.

When writing code, you will always come across errors.

(One more time)

When writing code, you will always come across errors.

Good programmers do not write perfect code the first time, or the second time (or the third time…).

Good programmers are able to understand an error, identify what’s causing it, and correct it within the code.

Run the code one more time and move on to the next exercise.


Hint
Run the code to move on to the next exercise.

script.c
--------


#include <stdio.h>

int main() {
  // output a line
  printf("Hello World!\n");
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Output
--------
The main goal of our Hello World code example is to output the text "Hello World!" to the console. The line of code that outputs text is:

printf("Hello World!\n");

Let’s dive deeper into the 2 parts of this line are:

	. printf() is known as a function and performs the action of printing text to the console.

	. "Hello World!\n" is a string. A string is text in between a pair of double quotes.

Placing the string in between the parentheses of the printf() function prints the text (without the quotes) to the console.

Functions and strings are topics covered in later lessons. Don’t worry if you don’t understand the concepts fully. The important thing to note is that this is how we create output in the 
console.

What about the \n at the end of the string? Good question! This is called an escape sequence and is used to add a non-visual character within a string.

In this case, \n adds a new line to the end of the string. Look what happens when we place it in between Hello and World!:

printf("Hello\nWorld!");

The above code will output:

Hello
World!

It’s important to remember an escape sequence is a character and must be within the double-quotes.

Another escape sequence is \t. This is equivalent to the tab key and will insert spaces within a string:

printf("Hello\tWorld!");

The above code will output:

Hello     World!

\n and \t are just two of many different escape sequences that can be put inside a string.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code in the workspace outputs some text to the console. This is supposed to be an easy-to-follow recipe but when you run the code you’ll see it is not that easy to read.

Run the code to move on and fix the recipe.


Hint
Run the code and move on to fix the recipe.

Checkpoint 2 Passed
2.
There are no newlines in the text.

Starting with the first printf() statement in main():

	. Add a newline escape sequence to the end of the string.

Run the code to see if the recipe looks better.


Hint
Use the following syntax:

printf("Some text\n");

Checkpoint 3 Passed
3.
The next statement needs a bit of space in the middle.

Within the second printf() statement in main():

	. Add a tab escape sequence in between the words butter and (Room Temperature)

Hint
Use the following syntax:

printf("Some\ttext");

Checkpoint 4 Passed
4.
This recipe needs to be sweeter.

Within main():

	. Add a printf() statement that outputs the string: "\n2/3 Cups: Granulated Sugar"

Notice the \n at the front of the string to ensure it is output on a new line.


Hint
Use the following syntax:

printf("\nSome text");

script.c
--------
#include <stdio.h>

int main() {
  // Simple Recipe
  printf("2 Cups: All Purpose Flour\n");
  printf("1 Cups: Unsalted Butter\t(Room Temperature)");
  printf("\n2/3 Cups: Granulated Sugar");
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


























